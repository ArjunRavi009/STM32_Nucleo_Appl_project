
STM_Appl_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002278  080081c4  080081c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a43c  0800a43c  0000343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a454  0800a454  0000402c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a454  0800a454  00003454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a45c  0800a45c  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0000345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a460  0800a460  00003460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800a464  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000002c  0800a490  0000402c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800a490  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f1b  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e4  00000000  00000000  0000bf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000523  00000000  00000000  0000db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201a1  00000000  00000000  0000e03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a14  00000000  00000000  0002e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4979  00000000  00000000  00036bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a8c  00000000  00000000  000fb5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fd038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081c4 <__do_global_dtors_aux>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4c05      	ldr	r4, [pc, #20]	@ (80081dc <__do_global_dtors_aux+0x18>)
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	b933      	cbnz	r3, 80081da <__do_global_dtors_aux+0x16>
 80081cc:	4b04      	ldr	r3, [pc, #16]	@ (80081e0 <__do_global_dtors_aux+0x1c>)
 80081ce:	b113      	cbz	r3, 80081d6 <__do_global_dtors_aux+0x12>
 80081d0:	4804      	ldr	r0, [pc, #16]	@ (80081e4 <__do_global_dtors_aux+0x20>)
 80081d2:	f3af 8000 	nop.w
 80081d6:	2301      	movs	r3, #1
 80081d8:	7023      	strb	r3, [r4, #0]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	2000002c 	.word	0x2000002c
 80081e0:	00000000 	.word	0x00000000
 80081e4:	0800a424 	.word	0x0800a424

080081e8 <frame_dummy>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	4b03      	ldr	r3, [pc, #12]	@ (80081f8 <frame_dummy+0x10>)
 80081ec:	b11b      	cbz	r3, 80081f6 <frame_dummy+0xe>
 80081ee:	4903      	ldr	r1, [pc, #12]	@ (80081fc <frame_dummy+0x14>)
 80081f0:	4803      	ldr	r0, [pc, #12]	@ (8008200 <frame_dummy+0x18>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	00000000 	.word	0x00000000
 80081fc:	20000030 	.word	0x20000030
 8008200:	0800a424 	.word	0x0800a424

08008204 <__aeabi_uldivmod>:
 8008204:	b953      	cbnz	r3, 800821c <__aeabi_uldivmod+0x18>
 8008206:	b94a      	cbnz	r2, 800821c <__aeabi_uldivmod+0x18>
 8008208:	2900      	cmp	r1, #0
 800820a:	bf08      	it	eq
 800820c:	2800      	cmpeq	r0, #0
 800820e:	bf1c      	itt	ne
 8008210:	f04f 31ff 	movne.w	r1, #4294967295
 8008214:	f04f 30ff 	movne.w	r0, #4294967295
 8008218:	f000 b988 	b.w	800852c <__aeabi_idiv0>
 800821c:	f1ad 0c08 	sub.w	ip, sp, #8
 8008220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008224:	f000 f806 	bl	8008234 <__udivmoddi4>
 8008228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800822c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008230:	b004      	add	sp, #16
 8008232:	4770      	bx	lr

08008234 <__udivmoddi4>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	9d08      	ldr	r5, [sp, #32]
 800823a:	468e      	mov	lr, r1
 800823c:	4604      	mov	r4, r0
 800823e:	4688      	mov	r8, r1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d14a      	bne.n	80082da <__udivmoddi4+0xa6>
 8008244:	428a      	cmp	r2, r1
 8008246:	4617      	mov	r7, r2
 8008248:	d962      	bls.n	8008310 <__udivmoddi4+0xdc>
 800824a:	fab2 f682 	clz	r6, r2
 800824e:	b14e      	cbz	r6, 8008264 <__udivmoddi4+0x30>
 8008250:	f1c6 0320 	rsb	r3, r6, #32
 8008254:	fa01 f806 	lsl.w	r8, r1, r6
 8008258:	fa20 f303 	lsr.w	r3, r0, r3
 800825c:	40b7      	lsls	r7, r6
 800825e:	ea43 0808 	orr.w	r8, r3, r8
 8008262:	40b4      	lsls	r4, r6
 8008264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008268:	fa1f fc87 	uxth.w	ip, r7
 800826c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008270:	0c23      	lsrs	r3, r4, #16
 8008272:	fb0e 8811 	mls	r8, lr, r1, r8
 8008276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800827a:	fb01 f20c 	mul.w	r2, r1, ip
 800827e:	429a      	cmp	r2, r3
 8008280:	d909      	bls.n	8008296 <__udivmoddi4+0x62>
 8008282:	18fb      	adds	r3, r7, r3
 8008284:	f101 30ff 	add.w	r0, r1, #4294967295
 8008288:	f080 80ea 	bcs.w	8008460 <__udivmoddi4+0x22c>
 800828c:	429a      	cmp	r2, r3
 800828e:	f240 80e7 	bls.w	8008460 <__udivmoddi4+0x22c>
 8008292:	3902      	subs	r1, #2
 8008294:	443b      	add	r3, r7
 8008296:	1a9a      	subs	r2, r3, r2
 8008298:	b2a3      	uxth	r3, r4
 800829a:	fbb2 f0fe 	udiv	r0, r2, lr
 800829e:	fb0e 2210 	mls	r2, lr, r0, r2
 80082a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80082aa:	459c      	cmp	ip, r3
 80082ac:	d909      	bls.n	80082c2 <__udivmoddi4+0x8e>
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80082b4:	f080 80d6 	bcs.w	8008464 <__udivmoddi4+0x230>
 80082b8:	459c      	cmp	ip, r3
 80082ba:	f240 80d3 	bls.w	8008464 <__udivmoddi4+0x230>
 80082be:	443b      	add	r3, r7
 80082c0:	3802      	subs	r0, #2
 80082c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80082c6:	eba3 030c 	sub.w	r3, r3, ip
 80082ca:	2100      	movs	r1, #0
 80082cc:	b11d      	cbz	r5, 80082d6 <__udivmoddi4+0xa2>
 80082ce:	40f3      	lsrs	r3, r6
 80082d0:	2200      	movs	r2, #0
 80082d2:	e9c5 3200 	strd	r3, r2, [r5]
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	428b      	cmp	r3, r1
 80082dc:	d905      	bls.n	80082ea <__udivmoddi4+0xb6>
 80082de:	b10d      	cbz	r5, 80082e4 <__udivmoddi4+0xb0>
 80082e0:	e9c5 0100 	strd	r0, r1, [r5]
 80082e4:	2100      	movs	r1, #0
 80082e6:	4608      	mov	r0, r1
 80082e8:	e7f5      	b.n	80082d6 <__udivmoddi4+0xa2>
 80082ea:	fab3 f183 	clz	r1, r3
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d146      	bne.n	8008380 <__udivmoddi4+0x14c>
 80082f2:	4573      	cmp	r3, lr
 80082f4:	d302      	bcc.n	80082fc <__udivmoddi4+0xc8>
 80082f6:	4282      	cmp	r2, r0
 80082f8:	f200 8105 	bhi.w	8008506 <__udivmoddi4+0x2d2>
 80082fc:	1a84      	subs	r4, r0, r2
 80082fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8008302:	2001      	movs	r0, #1
 8008304:	4690      	mov	r8, r2
 8008306:	2d00      	cmp	r5, #0
 8008308:	d0e5      	beq.n	80082d6 <__udivmoddi4+0xa2>
 800830a:	e9c5 4800 	strd	r4, r8, [r5]
 800830e:	e7e2      	b.n	80082d6 <__udivmoddi4+0xa2>
 8008310:	2a00      	cmp	r2, #0
 8008312:	f000 8090 	beq.w	8008436 <__udivmoddi4+0x202>
 8008316:	fab2 f682 	clz	r6, r2
 800831a:	2e00      	cmp	r6, #0
 800831c:	f040 80a4 	bne.w	8008468 <__udivmoddi4+0x234>
 8008320:	1a8a      	subs	r2, r1, r2
 8008322:	0c03      	lsrs	r3, r0, #16
 8008324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008328:	b280      	uxth	r0, r0
 800832a:	b2bc      	uxth	r4, r7
 800832c:	2101      	movs	r1, #1
 800832e:	fbb2 fcfe 	udiv	ip, r2, lr
 8008332:	fb0e 221c 	mls	r2, lr, ip, r2
 8008336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833a:	fb04 f20c 	mul.w	r2, r4, ip
 800833e:	429a      	cmp	r2, r3
 8008340:	d907      	bls.n	8008352 <__udivmoddi4+0x11e>
 8008342:	18fb      	adds	r3, r7, r3
 8008344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008348:	d202      	bcs.n	8008350 <__udivmoddi4+0x11c>
 800834a:	429a      	cmp	r2, r3
 800834c:	f200 80e0 	bhi.w	8008510 <__udivmoddi4+0x2dc>
 8008350:	46c4      	mov	ip, r8
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	fbb3 f2fe 	udiv	r2, r3, lr
 8008358:	fb0e 3312 	mls	r3, lr, r2, r3
 800835c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008360:	fb02 f404 	mul.w	r4, r2, r4
 8008364:	429c      	cmp	r4, r3
 8008366:	d907      	bls.n	8008378 <__udivmoddi4+0x144>
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	f102 30ff 	add.w	r0, r2, #4294967295
 800836e:	d202      	bcs.n	8008376 <__udivmoddi4+0x142>
 8008370:	429c      	cmp	r4, r3
 8008372:	f200 80ca 	bhi.w	800850a <__udivmoddi4+0x2d6>
 8008376:	4602      	mov	r2, r0
 8008378:	1b1b      	subs	r3, r3, r4
 800837a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800837e:	e7a5      	b.n	80082cc <__udivmoddi4+0x98>
 8008380:	f1c1 0620 	rsb	r6, r1, #32
 8008384:	408b      	lsls	r3, r1
 8008386:	fa22 f706 	lsr.w	r7, r2, r6
 800838a:	431f      	orrs	r7, r3
 800838c:	fa0e f401 	lsl.w	r4, lr, r1
 8008390:	fa20 f306 	lsr.w	r3, r0, r6
 8008394:	fa2e fe06 	lsr.w	lr, lr, r6
 8008398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800839c:	4323      	orrs	r3, r4
 800839e:	fa00 f801 	lsl.w	r8, r0, r1
 80083a2:	fa1f fc87 	uxth.w	ip, r7
 80083a6:	fbbe f0f9 	udiv	r0, lr, r9
 80083aa:	0c1c      	lsrs	r4, r3, #16
 80083ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80083b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80083b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80083b8:	45a6      	cmp	lr, r4
 80083ba:	fa02 f201 	lsl.w	r2, r2, r1
 80083be:	d909      	bls.n	80083d4 <__udivmoddi4+0x1a0>
 80083c0:	193c      	adds	r4, r7, r4
 80083c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80083c6:	f080 809c 	bcs.w	8008502 <__udivmoddi4+0x2ce>
 80083ca:	45a6      	cmp	lr, r4
 80083cc:	f240 8099 	bls.w	8008502 <__udivmoddi4+0x2ce>
 80083d0:	3802      	subs	r0, #2
 80083d2:	443c      	add	r4, r7
 80083d4:	eba4 040e 	sub.w	r4, r4, lr
 80083d8:	fa1f fe83 	uxth.w	lr, r3
 80083dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80083e0:	fb09 4413 	mls	r4, r9, r3, r4
 80083e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80083e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80083ec:	45a4      	cmp	ip, r4
 80083ee:	d908      	bls.n	8008402 <__udivmoddi4+0x1ce>
 80083f0:	193c      	adds	r4, r7, r4
 80083f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80083f6:	f080 8082 	bcs.w	80084fe <__udivmoddi4+0x2ca>
 80083fa:	45a4      	cmp	ip, r4
 80083fc:	d97f      	bls.n	80084fe <__udivmoddi4+0x2ca>
 80083fe:	3b02      	subs	r3, #2
 8008400:	443c      	add	r4, r7
 8008402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008406:	eba4 040c 	sub.w	r4, r4, ip
 800840a:	fba0 ec02 	umull	lr, ip, r0, r2
 800840e:	4564      	cmp	r4, ip
 8008410:	4673      	mov	r3, lr
 8008412:	46e1      	mov	r9, ip
 8008414:	d362      	bcc.n	80084dc <__udivmoddi4+0x2a8>
 8008416:	d05f      	beq.n	80084d8 <__udivmoddi4+0x2a4>
 8008418:	b15d      	cbz	r5, 8008432 <__udivmoddi4+0x1fe>
 800841a:	ebb8 0203 	subs.w	r2, r8, r3
 800841e:	eb64 0409 	sbc.w	r4, r4, r9
 8008422:	fa04 f606 	lsl.w	r6, r4, r6
 8008426:	fa22 f301 	lsr.w	r3, r2, r1
 800842a:	431e      	orrs	r6, r3
 800842c:	40cc      	lsrs	r4, r1
 800842e:	e9c5 6400 	strd	r6, r4, [r5]
 8008432:	2100      	movs	r1, #0
 8008434:	e74f      	b.n	80082d6 <__udivmoddi4+0xa2>
 8008436:	fbb1 fcf2 	udiv	ip, r1, r2
 800843a:	0c01      	lsrs	r1, r0, #16
 800843c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008440:	b280      	uxth	r0, r0
 8008442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008446:	463b      	mov	r3, r7
 8008448:	4638      	mov	r0, r7
 800844a:	463c      	mov	r4, r7
 800844c:	46b8      	mov	r8, r7
 800844e:	46be      	mov	lr, r7
 8008450:	2620      	movs	r6, #32
 8008452:	fbb1 f1f7 	udiv	r1, r1, r7
 8008456:	eba2 0208 	sub.w	r2, r2, r8
 800845a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800845e:	e766      	b.n	800832e <__udivmoddi4+0xfa>
 8008460:	4601      	mov	r1, r0
 8008462:	e718      	b.n	8008296 <__udivmoddi4+0x62>
 8008464:	4610      	mov	r0, r2
 8008466:	e72c      	b.n	80082c2 <__udivmoddi4+0x8e>
 8008468:	f1c6 0220 	rsb	r2, r6, #32
 800846c:	fa2e f302 	lsr.w	r3, lr, r2
 8008470:	40b7      	lsls	r7, r6
 8008472:	40b1      	lsls	r1, r6
 8008474:	fa20 f202 	lsr.w	r2, r0, r2
 8008478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800847c:	430a      	orrs	r2, r1
 800847e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008482:	b2bc      	uxth	r4, r7
 8008484:	fb0e 3318 	mls	r3, lr, r8, r3
 8008488:	0c11      	lsrs	r1, r2, #16
 800848a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800848e:	fb08 f904 	mul.w	r9, r8, r4
 8008492:	40b0      	lsls	r0, r6
 8008494:	4589      	cmp	r9, r1
 8008496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800849a:	b280      	uxth	r0, r0
 800849c:	d93e      	bls.n	800851c <__udivmoddi4+0x2e8>
 800849e:	1879      	adds	r1, r7, r1
 80084a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80084a4:	d201      	bcs.n	80084aa <__udivmoddi4+0x276>
 80084a6:	4589      	cmp	r9, r1
 80084a8:	d81f      	bhi.n	80084ea <__udivmoddi4+0x2b6>
 80084aa:	eba1 0109 	sub.w	r1, r1, r9
 80084ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80084b2:	fb09 f804 	mul.w	r8, r9, r4
 80084b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80084ba:	b292      	uxth	r2, r2
 80084bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80084c0:	4542      	cmp	r2, r8
 80084c2:	d229      	bcs.n	8008518 <__udivmoddi4+0x2e4>
 80084c4:	18ba      	adds	r2, r7, r2
 80084c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80084ca:	d2c4      	bcs.n	8008456 <__udivmoddi4+0x222>
 80084cc:	4542      	cmp	r2, r8
 80084ce:	d2c2      	bcs.n	8008456 <__udivmoddi4+0x222>
 80084d0:	f1a9 0102 	sub.w	r1, r9, #2
 80084d4:	443a      	add	r2, r7
 80084d6:	e7be      	b.n	8008456 <__udivmoddi4+0x222>
 80084d8:	45f0      	cmp	r8, lr
 80084da:	d29d      	bcs.n	8008418 <__udivmoddi4+0x1e4>
 80084dc:	ebbe 0302 	subs.w	r3, lr, r2
 80084e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80084e4:	3801      	subs	r0, #1
 80084e6:	46e1      	mov	r9, ip
 80084e8:	e796      	b.n	8008418 <__udivmoddi4+0x1e4>
 80084ea:	eba7 0909 	sub.w	r9, r7, r9
 80084ee:	4449      	add	r1, r9
 80084f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80084f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80084f8:	fb09 f804 	mul.w	r8, r9, r4
 80084fc:	e7db      	b.n	80084b6 <__udivmoddi4+0x282>
 80084fe:	4673      	mov	r3, lr
 8008500:	e77f      	b.n	8008402 <__udivmoddi4+0x1ce>
 8008502:	4650      	mov	r0, sl
 8008504:	e766      	b.n	80083d4 <__udivmoddi4+0x1a0>
 8008506:	4608      	mov	r0, r1
 8008508:	e6fd      	b.n	8008306 <__udivmoddi4+0xd2>
 800850a:	443b      	add	r3, r7
 800850c:	3a02      	subs	r2, #2
 800850e:	e733      	b.n	8008378 <__udivmoddi4+0x144>
 8008510:	f1ac 0c02 	sub.w	ip, ip, #2
 8008514:	443b      	add	r3, r7
 8008516:	e71c      	b.n	8008352 <__udivmoddi4+0x11e>
 8008518:	4649      	mov	r1, r9
 800851a:	e79c      	b.n	8008456 <__udivmoddi4+0x222>
 800851c:	eba1 0109 	sub.w	r1, r1, r9
 8008520:	46c4      	mov	ip, r8
 8008522:	fbb1 f9fe 	udiv	r9, r1, lr
 8008526:	fb09 f804 	mul.w	r8, r9, r4
 800852a:	e7c4      	b.n	80084b6 <__udivmoddi4+0x282>

0800852c <__aeabi_idiv0>:
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop

08008530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008534:	4b0e      	ldr	r3, [pc, #56]	@ (8008570 <HAL_Init+0x40>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a0d      	ldr	r2, [pc, #52]	@ (8008570 <HAL_Init+0x40>)
 800853a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800853e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008540:	4b0b      	ldr	r3, [pc, #44]	@ (8008570 <HAL_Init+0x40>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a0a      	ldr	r2, [pc, #40]	@ (8008570 <HAL_Init+0x40>)
 8008546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800854a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800854c:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <HAL_Init+0x40>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a07      	ldr	r2, [pc, #28]	@ (8008570 <HAL_Init+0x40>)
 8008552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008558:	2003      	movs	r0, #3
 800855a:	f000 f92b 	bl	80087b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800855e:	200f      	movs	r0, #15
 8008560:	f000 f808 	bl	8008574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008564:	f001 fe16 	bl	800a194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40023c00 	.word	0x40023c00

08008574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800857c:	4b12      	ldr	r3, [pc, #72]	@ (80085c8 <HAL_InitTick+0x54>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	4b12      	ldr	r3, [pc, #72]	@ (80085cc <HAL_InitTick+0x58>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	4619      	mov	r1, r3
 8008586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800858a:	fbb3 f3f1 	udiv	r3, r3, r1
 800858e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f943 	bl	800881e <HAL_SYSTICK_Config>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e00e      	b.n	80085c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b0f      	cmp	r3, #15
 80085a6:	d80a      	bhi.n	80085be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085a8:	2200      	movs	r2, #0
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	f000 f90b 	bl	80087ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085b4:	4a06      	ldr	r2, [pc, #24]	@ (80085d0 <HAL_InitTick+0x5c>)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	e000      	b.n	80085c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000028 	.word	0x20000028
 80085cc:	20000004 	.word	0x20000004
 80085d0:	20000000 	.word	0x20000000

080085d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085d8:	4b06      	ldr	r3, [pc, #24]	@ (80085f4 <HAL_IncTick+0x20>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	4b06      	ldr	r3, [pc, #24]	@ (80085f8 <HAL_IncTick+0x24>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4413      	add	r3, r2
 80085e4:	4a04      	ldr	r2, [pc, #16]	@ (80085f8 <HAL_IncTick+0x24>)
 80085e6:	6013      	str	r3, [r2, #0]
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000004 	.word	0x20000004
 80085f8:	20000048 	.word	0x20000048

080085fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  return uwTick;
 8008600:	4b03      	ldr	r3, [pc, #12]	@ (8008610 <HAL_GetTick+0x14>)
 8008602:	681b      	ldr	r3, [r3, #0]
}
 8008604:	4618      	mov	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000048 	.word	0x20000048

08008614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008624:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <__NVIC_SetPriorityGrouping+0x44>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008630:	4013      	ands	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800863c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008646:	4a04      	ldr	r2, [pc, #16]	@ (8008658 <__NVIC_SetPriorityGrouping+0x44>)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	60d3      	str	r3, [r2, #12]
}
 800864c:	bf00      	nop
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	e000ed00 	.word	0xe000ed00

0800865c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008660:	4b04      	ldr	r3, [pc, #16]	@ (8008674 <__NVIC_GetPriorityGrouping+0x18>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	0a1b      	lsrs	r3, r3, #8
 8008666:	f003 0307 	and.w	r3, r3, #7
}
 800866a:	4618      	mov	r0, r3
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	e000ed00 	.word	0xe000ed00

08008678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	db0b      	blt.n	80086a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800868a:	79fb      	ldrb	r3, [r7, #7]
 800868c:	f003 021f 	and.w	r2, r3, #31
 8008690:	4907      	ldr	r1, [pc, #28]	@ (80086b0 <__NVIC_EnableIRQ+0x38>)
 8008692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	2001      	movs	r0, #1
 800869a:	fa00 f202 	lsl.w	r2, r0, r2
 800869e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	e000e100 	.word	0xe000e100

080086b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	db0a      	blt.n	80086de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	490c      	ldr	r1, [pc, #48]	@ (8008700 <__NVIC_SetPriority+0x4c>)
 80086ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d2:	0112      	lsls	r2, r2, #4
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	440b      	add	r3, r1
 80086d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80086dc:	e00a      	b.n	80086f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	4908      	ldr	r1, [pc, #32]	@ (8008704 <__NVIC_SetPriority+0x50>)
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	3b04      	subs	r3, #4
 80086ec:	0112      	lsls	r2, r2, #4
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	440b      	add	r3, r1
 80086f2:	761a      	strb	r2, [r3, #24]
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	e000e100 	.word	0xe000e100
 8008704:	e000ed00 	.word	0xe000ed00

08008708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008708:	b480      	push	{r7}
 800870a:	b089      	sub	sp, #36	@ 0x24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f1c3 0307 	rsb	r3, r3, #7
 8008722:	2b04      	cmp	r3, #4
 8008724:	bf28      	it	cs
 8008726:	2304      	movcs	r3, #4
 8008728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	3304      	adds	r3, #4
 800872e:	2b06      	cmp	r3, #6
 8008730:	d902      	bls.n	8008738 <NVIC_EncodePriority+0x30>
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3b03      	subs	r3, #3
 8008736:	e000      	b.n	800873a <NVIC_EncodePriority+0x32>
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	fa02 f303 	lsl.w	r3, r2, r3
 8008746:	43da      	mvns	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	401a      	ands	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008750:	f04f 31ff 	mov.w	r1, #4294967295
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	43d9      	mvns	r1, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008760:	4313      	orrs	r3, r2
         );
}
 8008762:	4618      	mov	r0, r3
 8008764:	3724      	adds	r7, #36	@ 0x24
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3b01      	subs	r3, #1
 800877c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008780:	d301      	bcc.n	8008786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008782:	2301      	movs	r3, #1
 8008784:	e00f      	b.n	80087a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008786:	4a0a      	ldr	r2, [pc, #40]	@ (80087b0 <SysTick_Config+0x40>)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3b01      	subs	r3, #1
 800878c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800878e:	210f      	movs	r1, #15
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	f7ff ff8e 	bl	80086b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008798:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <SysTick_Config+0x40>)
 800879a:	2200      	movs	r2, #0
 800879c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800879e:	4b04      	ldr	r3, [pc, #16]	@ (80087b0 <SysTick_Config+0x40>)
 80087a0:	2207      	movs	r2, #7
 80087a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	e000e010 	.word	0xe000e010

080087b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff ff29 	bl	8008614 <__NVIC_SetPriorityGrouping>
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b086      	sub	sp, #24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	4603      	mov	r3, r0
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80087dc:	f7ff ff3e 	bl	800865c <__NVIC_GetPriorityGrouping>
 80087e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	6978      	ldr	r0, [r7, #20]
 80087e8:	f7ff ff8e 	bl	8008708 <NVIC_EncodePriority>
 80087ec:	4602      	mov	r2, r0
 80087ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f2:	4611      	mov	r1, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff ff5d 	bl	80086b4 <__NVIC_SetPriority>
}
 80087fa:	bf00      	nop
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	4603      	mov	r3, r0
 800880a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800880c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff ff31 	bl	8008678 <__NVIC_EnableIRQ>
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ffa2 	bl	8008770 <SysTick_Config>
 800882c:	4603      	mov	r3, r0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008838:	b480      	push	{r7}
 800883a:	b089      	sub	sp, #36	@ 0x24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008846:	2300      	movs	r3, #0
 8008848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800884a:	2300      	movs	r3, #0
 800884c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	e165      	b.n	8008b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008854:	2201      	movs	r2, #1
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4013      	ands	r3, r2
 8008866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	f040 8154 	bne.w	8008b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b01      	cmp	r3, #1
 800887c:	d005      	beq.n	800888a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008886:	2b02      	cmp	r3, #2
 8008888:	d130      	bne.n	80088ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	2203      	movs	r2, #3
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	43db      	mvns	r3, r3
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	4013      	ands	r3, r2
 80088a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	fa02 f303 	lsl.w	r3, r2, r3
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088c0:	2201      	movs	r2, #1
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	43db      	mvns	r3, r3
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	4013      	ands	r3, r2
 80088ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	091b      	lsrs	r3, r3, #4
 80088d6:	f003 0201 	and.w	r2, r3, #1
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d017      	beq.n	8008928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	2203      	movs	r2, #3
 8008904:	fa02 f303 	lsl.w	r3, r2, r3
 8008908:	43db      	mvns	r3, r3
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	4013      	ands	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	4313      	orrs	r3, r2
 8008920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d123      	bne.n	800897c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	08da      	lsrs	r2, r3, #3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3208      	adds	r2, #8
 800893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	220f      	movs	r2, #15
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	43db      	mvns	r3, r3
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	4013      	ands	r3, r2
 8008956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4313      	orrs	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	08da      	lsrs	r2, r3, #3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3208      	adds	r2, #8
 8008976:	69b9      	ldr	r1, [r7, #24]
 8008978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	2203      	movs	r2, #3
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	43db      	mvns	r3, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4013      	ands	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f003 0203 	and.w	r2, r3, #3
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80ae 	beq.w	8008b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	4b5d      	ldr	r3, [pc, #372]	@ (8008b38 <HAL_GPIO_Init+0x300>)
 80089c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c6:	4a5c      	ldr	r2, [pc, #368]	@ (8008b38 <HAL_GPIO_Init+0x300>)
 80089c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80089ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008b38 <HAL_GPIO_Init+0x300>)
 80089d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089da:	4a58      	ldr	r2, [pc, #352]	@ (8008b3c <HAL_GPIO_Init+0x304>)
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	089b      	lsrs	r3, r3, #2
 80089e0:	3302      	adds	r3, #2
 80089e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	220f      	movs	r2, #15
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	43db      	mvns	r3, r3
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	4013      	ands	r3, r2
 80089fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a4f      	ldr	r2, [pc, #316]	@ (8008b40 <HAL_GPIO_Init+0x308>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d025      	beq.n	8008a52 <HAL_GPIO_Init+0x21a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a4e      	ldr	r2, [pc, #312]	@ (8008b44 <HAL_GPIO_Init+0x30c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d01f      	beq.n	8008a4e <HAL_GPIO_Init+0x216>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a4d      	ldr	r2, [pc, #308]	@ (8008b48 <HAL_GPIO_Init+0x310>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d019      	beq.n	8008a4a <HAL_GPIO_Init+0x212>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a4c      	ldr	r2, [pc, #304]	@ (8008b4c <HAL_GPIO_Init+0x314>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d013      	beq.n	8008a46 <HAL_GPIO_Init+0x20e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a4b      	ldr	r2, [pc, #300]	@ (8008b50 <HAL_GPIO_Init+0x318>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00d      	beq.n	8008a42 <HAL_GPIO_Init+0x20a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a4a      	ldr	r2, [pc, #296]	@ (8008b54 <HAL_GPIO_Init+0x31c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d007      	beq.n	8008a3e <HAL_GPIO_Init+0x206>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a49      	ldr	r2, [pc, #292]	@ (8008b58 <HAL_GPIO_Init+0x320>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d101      	bne.n	8008a3a <HAL_GPIO_Init+0x202>
 8008a36:	2306      	movs	r3, #6
 8008a38:	e00c      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a3a:	2307      	movs	r3, #7
 8008a3c:	e00a      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a3e:	2305      	movs	r3, #5
 8008a40:	e008      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a42:	2304      	movs	r3, #4
 8008a44:	e006      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a46:	2303      	movs	r3, #3
 8008a48:	e004      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e002      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <HAL_GPIO_Init+0x21c>
 8008a52:	2300      	movs	r3, #0
 8008a54:	69fa      	ldr	r2, [r7, #28]
 8008a56:	f002 0203 	and.w	r2, r2, #3
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	4093      	lsls	r3, r2
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a64:	4935      	ldr	r1, [pc, #212]	@ (8008b3c <HAL_GPIO_Init+0x304>)
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	089b      	lsrs	r3, r3, #2
 8008a6a:	3302      	adds	r3, #2
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a72:	4b3a      	ldr	r3, [pc, #232]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a96:	4a31      	ldr	r2, [pc, #196]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ac0:	4a26      	ldr	r2, [pc, #152]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ac6:	4b25      	ldr	r3, [pc, #148]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	43db      	mvns	r3, r3
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008aea:	4a1c      	ldr	r2, [pc, #112]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008af0:	4b1a      	ldr	r3, [pc, #104]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	43db      	mvns	r3, r3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4013      	ands	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b14:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <HAL_GPIO_Init+0x324>)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	f67f ae96 	bls.w	8008854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	3724      	adds	r7, #36	@ 0x24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	40013800 	.word	0x40013800
 8008b40:	40020000 	.word	0x40020000
 8008b44:	40020400 	.word	0x40020400
 8008b48:	40020800 	.word	0x40020800
 8008b4c:	40020c00 	.word	0x40020c00
 8008b50:	40021000 	.word	0x40021000
 8008b54:	40021400 	.word	0x40021400
 8008b58:	40021800 	.word	0x40021800
 8008b5c:	40013c00 	.word	0x40013c00

08008b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b70:	787b      	ldrb	r3, [r7, #1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b76:	887a      	ldrh	r2, [r7, #2]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b7c:	e003      	b.n	8008b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	041a      	lsls	r2, r3, #16
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	619a      	str	r2, [r3, #24]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ba4:	887a      	ldrh	r2, [r7, #2]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	041a      	lsls	r2, r3, #16
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	43d9      	mvns	r1, r3
 8008bb0:	887b      	ldrh	r3, [r7, #2]
 8008bb2:	400b      	ands	r3, r1
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	619a      	str	r2, [r3, #24]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008bd2:	4b08      	ldr	r3, [pc, #32]	@ (8008bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bd4:	695a      	ldr	r2, [r3, #20]
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d006      	beq.n	8008bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008bde:	4a05      	ldr	r2, [pc, #20]	@ (8008bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008be0:	88fb      	ldrh	r3, [r7, #6]
 8008be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 f974 	bl	8009ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40013c00 	.word	0x40013c00

08008bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0cc      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c0c:	4b68      	ldr	r3, [pc, #416]	@ (8008db0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d90c      	bls.n	8008c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1a:	4b65      	ldr	r3, [pc, #404]	@ (8008db0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c22:	4b63      	ldr	r3, [pc, #396]	@ (8008db0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0b8      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d020      	beq.n	8008c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c4c:	4b59      	ldr	r3, [pc, #356]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	4a58      	ldr	r2, [pc, #352]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c64:	4b53      	ldr	r3, [pc, #332]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	4a52      	ldr	r2, [pc, #328]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c70:	4b50      	ldr	r3, [pc, #320]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	494d      	ldr	r1, [pc, #308]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d044      	beq.n	8008d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d107      	bne.n	8008ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c96:	4b47      	ldr	r3, [pc, #284]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d119      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e07f      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d003      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d109      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e06f      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e067      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cd6:	4b37      	ldr	r3, [pc, #220]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f023 0203 	bic.w	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	4934      	ldr	r1, [pc, #208]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ce8:	f7ff fc88 	bl	80085fc <HAL_GetTick>
 8008cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cee:	e00a      	b.n	8008d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cf0:	f7ff fc84 	bl	80085fc <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d901      	bls.n	8008d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e04f      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d06:	4b2b      	ldr	r3, [pc, #172]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 020c 	and.w	r2, r3, #12
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d1eb      	bne.n	8008cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d18:	4b25      	ldr	r3, [pc, #148]	@ (8008db0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d20c      	bcs.n	8008d40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d26:	4b22      	ldr	r3, [pc, #136]	@ (8008db0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d2e:	4b20      	ldr	r3, [pc, #128]	@ (8008db0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d001      	beq.n	8008d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e032      	b.n	8008da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d4c:	4b19      	ldr	r3, [pc, #100]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4916      	ldr	r1, [pc, #88]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d6a:	4b12      	ldr	r3, [pc, #72]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	490e      	ldr	r1, [pc, #56]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d7e:	f000 f855 	bl	8008e2c <HAL_RCC_GetSysClockFreq>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4b0b      	ldr	r3, [pc, #44]	@ (8008db4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	091b      	lsrs	r3, r3, #4
 8008d8a:	f003 030f 	and.w	r3, r3, #15
 8008d8e:	490a      	ldr	r1, [pc, #40]	@ (8008db8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d90:	5ccb      	ldrb	r3, [r1, r3]
 8008d92:	fa22 f303 	lsr.w	r3, r2, r3
 8008d96:	4a09      	ldr	r2, [pc, #36]	@ (8008dbc <HAL_RCC_ClockConfig+0x1c4>)
 8008d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008d9a:	4b09      	ldr	r3, [pc, #36]	@ (8008dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fbe8 	bl	8008574 <HAL_InitTick>

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	40023c00 	.word	0x40023c00
 8008db4:	40023800 	.word	0x40023800
 8008db8:	0800a43c 	.word	0x0800a43c
 8008dbc:	20000028 	.word	0x20000028
 8008dc0:	20000000 	.word	0x20000000

08008dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dc8:	4b03      	ldr	r3, [pc, #12]	@ (8008dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dca:	681b      	ldr	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000028 	.word	0x20000028

08008ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008de0:	f7ff fff0 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008de4:	4602      	mov	r2, r0
 8008de6:	4b05      	ldr	r3, [pc, #20]	@ (8008dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	0a9b      	lsrs	r3, r3, #10
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	4903      	ldr	r1, [pc, #12]	@ (8008e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008df2:	5ccb      	ldrb	r3, [r1, r3]
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	0800a44c 	.word	0x0800a44c

08008e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e08:	f7ff ffdc 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	0b5b      	lsrs	r3, r3, #13
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	4903      	ldr	r1, [pc, #12]	@ (8008e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e1a:	5ccb      	ldrb	r3, [r1, r3]
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40023800 	.word	0x40023800
 8008e28:	0800a44c 	.word	0x0800a44c

08008e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e30:	b0a6      	sub	sp, #152	@ 0x98
 8008e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e52:	4bc8      	ldr	r3, [pc, #800]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 030c 	and.w	r3, r3, #12
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	f200 817e 	bhi.w	800915c <HAL_RCC_GetSysClockFreq+0x330>
 8008e60:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e66:	bf00      	nop
 8008e68:	08008e9d 	.word	0x08008e9d
 8008e6c:	0800915d 	.word	0x0800915d
 8008e70:	0800915d 	.word	0x0800915d
 8008e74:	0800915d 	.word	0x0800915d
 8008e78:	08008ea5 	.word	0x08008ea5
 8008e7c:	0800915d 	.word	0x0800915d
 8008e80:	0800915d 	.word	0x0800915d
 8008e84:	0800915d 	.word	0x0800915d
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	0800915d 	.word	0x0800915d
 8008e90:	0800915d 	.word	0x0800915d
 8008e94:	0800915d 	.word	0x0800915d
 8008e98:	08009017 	.word	0x08009017
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e9c:	4bb6      	ldr	r3, [pc, #728]	@ (8009178 <HAL_RCC_GetSysClockFreq+0x34c>)
 8008e9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8008ea2:	e15f      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ea4:	4bb5      	ldr	r3, [pc, #724]	@ (800917c <HAL_RCC_GetSysClockFreq+0x350>)
 8008ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8008eaa:	e15b      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008eac:	4bb1      	ldr	r3, [pc, #708]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008eb8:	4bae      	ldr	r3, [pc, #696]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d031      	beq.n	8008f28 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ec4:	4bab      	ldr	r3, [pc, #684]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	099b      	lsrs	r3, r3, #6
 8008eca:	2200      	movs	r2, #0
 8008ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ece:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ed0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ed8:	2300      	movs	r3, #0
 8008eda:	667b      	str	r3, [r7, #100]	@ 0x64
 8008edc:	4ba7      	ldr	r3, [pc, #668]	@ (800917c <HAL_RCC_GetSysClockFreq+0x350>)
 8008ede:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	fb03 f202 	mul.w	r2, r3, r2
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4621      	mov	r1, r4
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4aa2      	ldr	r2, [pc, #648]	@ (800917c <HAL_RCC_GetSysClockFreq+0x350>)
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	fba1 1202 	umull	r1, r2, r1, r2
 8008efa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008efc:	460a      	mov	r2, r1
 8008efe:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008f00:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f02:	4413      	add	r3, r2
 8008f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008f10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f14:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008f18:	f7ff f974 	bl	8008204 <__aeabi_uldivmod>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4613      	mov	r3, r2
 8008f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f26:	e064      	b.n	8008ff2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f28:	4b92      	ldr	r3, [pc, #584]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	099b      	lsrs	r3, r3, #6
 8008f2e:	2200      	movs	r2, #0
 8008f30:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f32:	657a      	str	r2, [r7, #84]	@ 0x54
 8008f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008f44:	4622      	mov	r2, r4
 8008f46:	462b      	mov	r3, r5
 8008f48:	f04f 0000 	mov.w	r0, #0
 8008f4c:	f04f 0100 	mov.w	r1, #0
 8008f50:	0159      	lsls	r1, r3, #5
 8008f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f56:	0150      	lsls	r0, r2, #5
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	1a51      	subs	r1, r2, r1
 8008f60:	6139      	str	r1, [r7, #16]
 8008f62:	4629      	mov	r1, r5
 8008f64:	eb63 0301 	sbc.w	r3, r3, r1
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	f04f 0200 	mov.w	r2, #0
 8008f6e:	f04f 0300 	mov.w	r3, #0
 8008f72:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f76:	4659      	mov	r1, fp
 8008f78:	018b      	lsls	r3, r1, #6
 8008f7a:	4651      	mov	r1, sl
 8008f7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f80:	4651      	mov	r1, sl
 8008f82:	018a      	lsls	r2, r1, #6
 8008f84:	4651      	mov	r1, sl
 8008f86:	ebb2 0801 	subs.w	r8, r2, r1
 8008f8a:	4659      	mov	r1, fp
 8008f8c:	eb63 0901 	sbc.w	r9, r3, r1
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fa0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fa4:	4690      	mov	r8, r2
 8008fa6:	4699      	mov	r9, r3
 8008fa8:	4623      	mov	r3, r4
 8008faa:	eb18 0303 	adds.w	r3, r8, r3
 8008fae:	60bb      	str	r3, [r7, #8]
 8008fb0:	462b      	mov	r3, r5
 8008fb2:	eb49 0303 	adc.w	r3, r9, r3
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	028b      	lsls	r3, r1, #10
 8008fc8:	4621      	mov	r1, r4
 8008fca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008fce:	4621      	mov	r1, r4
 8008fd0:	028a      	lsls	r2, r1, #10
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fda:	2200      	movs	r2, #0
 8008fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008fe4:	f7ff f90e 	bl	8008204 <__aeabi_uldivmod>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4613      	mov	r3, r2
 8008fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008ff2:	4b60      	ldr	r3, [pc, #384]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	0c1b      	lsrs	r3, r3, #16
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8009004:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800900c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009010:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8009014:	e0a6      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009016:	4b57      	ldr	r3, [pc, #348]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800901e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009022:	4b54      	ldr	r3, [pc, #336]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d02a      	beq.n	8009084 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800902e:	4b51      	ldr	r3, [pc, #324]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	099b      	lsrs	r3, r3, #6
 8009034:	2200      	movs	r2, #0
 8009036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009038:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800903a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009040:	2100      	movs	r1, #0
 8009042:	4b4e      	ldr	r3, [pc, #312]	@ (800917c <HAL_RCC_GetSysClockFreq+0x350>)
 8009044:	fb03 f201 	mul.w	r2, r3, r1
 8009048:	2300      	movs	r3, #0
 800904a:	fb00 f303 	mul.w	r3, r0, r3
 800904e:	4413      	add	r3, r2
 8009050:	4a4a      	ldr	r2, [pc, #296]	@ (800917c <HAL_RCC_GetSysClockFreq+0x350>)
 8009052:	fba0 1202 	umull	r1, r2, r0, r2
 8009056:	677a      	str	r2, [r7, #116]	@ 0x74
 8009058:	460a      	mov	r2, r1
 800905a:	673a      	str	r2, [r7, #112]	@ 0x70
 800905c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800905e:	4413      	add	r3, r2
 8009060:	677b      	str	r3, [r7, #116]	@ 0x74
 8009062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009066:	2200      	movs	r2, #0
 8009068:	633b      	str	r3, [r7, #48]	@ 0x30
 800906a:	637a      	str	r2, [r7, #52]	@ 0x34
 800906c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009070:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8009074:	f7ff f8c6 	bl	8008204 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4613      	mov	r3, r2
 800907e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009082:	e05b      	b.n	800913c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009084:	4b3b      	ldr	r3, [pc, #236]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	099b      	lsrs	r3, r3, #6
 800908a:	2200      	movs	r2, #0
 800908c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800908e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009096:	623b      	str	r3, [r7, #32]
 8009098:	2300      	movs	r3, #0
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
 800909c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	f04f 0000 	mov.w	r0, #0
 80090a8:	f04f 0100 	mov.w	r1, #0
 80090ac:	0159      	lsls	r1, r3, #5
 80090ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090b2:	0150      	lsls	r0, r2, #5
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4641      	mov	r1, r8
 80090ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80090be:	4649      	mov	r1, r9
 80090c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80090d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80090d8:	ebb2 040a 	subs.w	r4, r2, sl
 80090dc:	eb63 050b 	sbc.w	r5, r3, fp
 80090e0:	f04f 0200 	mov.w	r2, #0
 80090e4:	f04f 0300 	mov.w	r3, #0
 80090e8:	00eb      	lsls	r3, r5, #3
 80090ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ee:	00e2      	lsls	r2, r4, #3
 80090f0:	4614      	mov	r4, r2
 80090f2:	461d      	mov	r5, r3
 80090f4:	4643      	mov	r3, r8
 80090f6:	18e3      	adds	r3, r4, r3
 80090f8:	603b      	str	r3, [r7, #0]
 80090fa:	464b      	mov	r3, r9
 80090fc:	eb45 0303 	adc.w	r3, r5, r3
 8009100:	607b      	str	r3, [r7, #4]
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800910e:	4629      	mov	r1, r5
 8009110:	028b      	lsls	r3, r1, #10
 8009112:	4621      	mov	r1, r4
 8009114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009118:	4621      	mov	r1, r4
 800911a:	028a      	lsls	r2, r1, #10
 800911c:	4610      	mov	r0, r2
 800911e:	4619      	mov	r1, r3
 8009120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009124:	2200      	movs	r2, #0
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	61fa      	str	r2, [r7, #28]
 800912a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800912e:	f7ff f869 	bl	8008204 <__aeabi_uldivmod>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4613      	mov	r3, r2
 8009138:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800913c:	4b0d      	ldr	r3, [pc, #52]	@ (8009174 <HAL_RCC_GetSysClockFreq+0x348>)
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	0f1b      	lsrs	r3, r3, #28
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800914a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800914e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009152:	fbb2 f3f3 	udiv	r3, r2, r3
 8009156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800915a:	e003      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800915c:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <HAL_RCC_GetSysClockFreq+0x34c>)
 800915e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8009162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009164:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8009168:	4618      	mov	r0, r3
 800916a:	3798      	adds	r7, #152	@ 0x98
 800916c:	46bd      	mov	sp, r7
 800916e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009172:	bf00      	nop
 8009174:	40023800 	.word	0x40023800
 8009178:	00f42400 	.word	0x00f42400
 800917c:	017d7840 	.word	0x017d7840

08009180 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e28d      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 8083 	beq.w	80092a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80091a0:	4b94      	ldr	r3, [pc, #592]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f003 030c 	and.w	r3, r3, #12
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	d019      	beq.n	80091e0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80091ac:	4b91      	ldr	r3, [pc, #580]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 030c 	and.w	r3, r3, #12
        || \
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d106      	bne.n	80091c6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80091b8:	4b8e      	ldr	r3, [pc, #568]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091c4:	d00c      	beq.n	80091e0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091c6:	4b8b      	ldr	r3, [pc, #556]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80091ce:	2b0c      	cmp	r3, #12
 80091d0:	d112      	bne.n	80091f8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091d2:	4b88      	ldr	r3, [pc, #544]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091de:	d10b      	bne.n	80091f8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e0:	4b84      	ldr	r3, [pc, #528]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d05b      	beq.n	80092a4 <HAL_RCC_OscConfig+0x124>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d157      	bne.n	80092a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e25a      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009200:	d106      	bne.n	8009210 <HAL_RCC_OscConfig+0x90>
 8009202:	4b7c      	ldr	r3, [pc, #496]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a7b      	ldr	r2, [pc, #492]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	e01d      	b.n	800924c <HAL_RCC_OscConfig+0xcc>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009218:	d10c      	bne.n	8009234 <HAL_RCC_OscConfig+0xb4>
 800921a:	4b76      	ldr	r3, [pc, #472]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a75      	ldr	r2, [pc, #468]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4b73      	ldr	r3, [pc, #460]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a72      	ldr	r2, [pc, #456]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 800922c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e00b      	b.n	800924c <HAL_RCC_OscConfig+0xcc>
 8009234:	4b6f      	ldr	r3, [pc, #444]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a6e      	ldr	r2, [pc, #440]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 800923a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4b6c      	ldr	r3, [pc, #432]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a6b      	ldr	r2, [pc, #428]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800924a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d013      	beq.n	800927c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009254:	f7ff f9d2 	bl	80085fc <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800925c:	f7ff f9ce 	bl	80085fc <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	@ 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e21f      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800926e:	4b61      	ldr	r3, [pc, #388]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0xdc>
 800927a:	e014      	b.n	80092a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927c:	f7ff f9be 	bl	80085fc <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009284:	f7ff f9ba 	bl	80085fc <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b64      	cmp	r3, #100	@ 0x64
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e20b      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009296:	4b57      	ldr	r3, [pc, #348]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0x104>
 80092a2:	e000      	b.n	80092a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d06f      	beq.n	8009392 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80092b2:	4b50      	ldr	r3, [pc, #320]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d017      	beq.n	80092ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80092be:	4b4d      	ldr	r3, [pc, #308]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d105      	bne.n	80092d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80092ca:	4b4a      	ldr	r3, [pc, #296]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092d6:	4b47      	ldr	r3, [pc, #284]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80092de:	2b0c      	cmp	r3, #12
 80092e0:	d11c      	bne.n	800931c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092e2:	4b44      	ldr	r3, [pc, #272]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d116      	bne.n	800931c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ee:	4b41      	ldr	r3, [pc, #260]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <HAL_RCC_OscConfig+0x186>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d001      	beq.n	8009306 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e1d3      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009306:	4b3b      	ldr	r3, [pc, #236]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	4937      	ldr	r1, [pc, #220]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009316:	4313      	orrs	r3, r2
 8009318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800931a:	e03a      	b.n	8009392 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d020      	beq.n	8009366 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009324:	4b34      	ldr	r3, [pc, #208]	@ (80093f8 <HAL_RCC_OscConfig+0x278>)
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800932a:	f7ff f967 	bl	80085fc <HAL_GetTick>
 800932e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009330:	e008      	b.n	8009344 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009332:	f7ff f963 	bl	80085fc <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d901      	bls.n	8009344 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e1b4      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009344:	4b2b      	ldr	r3, [pc, #172]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009350:	4b28      	ldr	r3, [pc, #160]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	4925      	ldr	r1, [pc, #148]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009360:	4313      	orrs	r3, r2
 8009362:	600b      	str	r3, [r1, #0]
 8009364:	e015      	b.n	8009392 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009366:	4b24      	ldr	r3, [pc, #144]	@ (80093f8 <HAL_RCC_OscConfig+0x278>)
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800936c:	f7ff f946 	bl	80085fc <HAL_GetTick>
 8009370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009372:	e008      	b.n	8009386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009374:	f7ff f942 	bl	80085fc <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d901      	bls.n	8009386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e193      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009386:	4b1b      	ldr	r3, [pc, #108]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1f0      	bne.n	8009374 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d036      	beq.n	800940c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d016      	beq.n	80093d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093a6:	4b15      	ldr	r3, [pc, #84]	@ (80093fc <HAL_RCC_OscConfig+0x27c>)
 80093a8:	2201      	movs	r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ac:	f7ff f926 	bl	80085fc <HAL_GetTick>
 80093b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093b2:	e008      	b.n	80093c6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093b4:	f7ff f922 	bl	80085fc <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e173      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093c6:	4b0b      	ldr	r3, [pc, #44]	@ (80093f4 <HAL_RCC_OscConfig+0x274>)
 80093c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f0      	beq.n	80093b4 <HAL_RCC_OscConfig+0x234>
 80093d2:	e01b      	b.n	800940c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093d4:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <HAL_RCC_OscConfig+0x27c>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093da:	f7ff f90f 	bl	80085fc <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093e0:	e00e      	b.n	8009400 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093e2:	f7ff f90b 	bl	80085fc <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d907      	bls.n	8009400 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e15c      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
 80093f4:	40023800 	.word	0x40023800
 80093f8:	42470000 	.word	0x42470000
 80093fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009400:	4b8a      	ldr	r3, [pc, #552]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1ea      	bne.n	80093e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8097 	beq.w	8009548 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800941e:	4b83      	ldr	r3, [pc, #524]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10f      	bne.n	800944a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	4b7f      	ldr	r3, [pc, #508]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009432:	4a7e      	ldr	r2, [pc, #504]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009438:	6413      	str	r3, [r2, #64]	@ 0x40
 800943a:	4b7c      	ldr	r3, [pc, #496]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009442:	60bb      	str	r3, [r7, #8]
 8009444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009446:	2301      	movs	r3, #1
 8009448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800944a:	4b79      	ldr	r3, [pc, #484]	@ (8009630 <HAL_RCC_OscConfig+0x4b0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009452:	2b00      	cmp	r3, #0
 8009454:	d118      	bne.n	8009488 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009456:	4b76      	ldr	r3, [pc, #472]	@ (8009630 <HAL_RCC_OscConfig+0x4b0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a75      	ldr	r2, [pc, #468]	@ (8009630 <HAL_RCC_OscConfig+0x4b0>)
 800945c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009462:	f7ff f8cb 	bl	80085fc <HAL_GetTick>
 8009466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009468:	e008      	b.n	800947c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800946a:	f7ff f8c7 	bl	80085fc <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	2b02      	cmp	r3, #2
 8009476:	d901      	bls.n	800947c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e118      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800947c:	4b6c      	ldr	r3, [pc, #432]	@ (8009630 <HAL_RCC_OscConfig+0x4b0>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0f0      	beq.n	800946a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d106      	bne.n	800949e <HAL_RCC_OscConfig+0x31e>
 8009490:	4b66      	ldr	r3, [pc, #408]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009494:	4a65      	ldr	r2, [pc, #404]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009496:	f043 0301 	orr.w	r3, r3, #1
 800949a:	6713      	str	r3, [r2, #112]	@ 0x70
 800949c:	e01c      	b.n	80094d8 <HAL_RCC_OscConfig+0x358>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	d10c      	bne.n	80094c0 <HAL_RCC_OscConfig+0x340>
 80094a6:	4b61      	ldr	r3, [pc, #388]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094aa:	4a60      	ldr	r2, [pc, #384]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094ac:	f043 0304 	orr.w	r3, r3, #4
 80094b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80094b2:	4b5e      	ldr	r3, [pc, #376]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b6:	4a5d      	ldr	r2, [pc, #372]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80094be:	e00b      	b.n	80094d8 <HAL_RCC_OscConfig+0x358>
 80094c0:	4b5a      	ldr	r3, [pc, #360]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c4:	4a59      	ldr	r2, [pc, #356]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094c6:	f023 0301 	bic.w	r3, r3, #1
 80094ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80094cc:	4b57      	ldr	r3, [pc, #348]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094d0:	4a56      	ldr	r2, [pc, #344]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80094d2:	f023 0304 	bic.w	r3, r3, #4
 80094d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d015      	beq.n	800950c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094e0:	f7ff f88c 	bl	80085fc <HAL_GetTick>
 80094e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094e6:	e00a      	b.n	80094fe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094e8:	f7ff f888 	bl	80085fc <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e0d7      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094fe:	4b4b      	ldr	r3, [pc, #300]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0ee      	beq.n	80094e8 <HAL_RCC_OscConfig+0x368>
 800950a:	e014      	b.n	8009536 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800950c:	f7ff f876 	bl	80085fc <HAL_GetTick>
 8009510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009512:	e00a      	b.n	800952a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009514:	f7ff f872 	bl	80085fc <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009522:	4293      	cmp	r3, r2
 8009524:	d901      	bls.n	800952a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e0c1      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800952a:	4b40      	ldr	r3, [pc, #256]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 800952c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1ee      	bne.n	8009514 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d105      	bne.n	8009548 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800953c:	4b3b      	ldr	r3, [pc, #236]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 800953e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009540:	4a3a      	ldr	r2, [pc, #232]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009546:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 80ad 	beq.w	80096ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009552:	4b36      	ldr	r3, [pc, #216]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f003 030c 	and.w	r3, r3, #12
 800955a:	2b08      	cmp	r3, #8
 800955c:	d060      	beq.n	8009620 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d145      	bne.n	80095f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009566:	4b33      	ldr	r3, [pc, #204]	@ (8009634 <HAL_RCC_OscConfig+0x4b4>)
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7ff f846 	bl	80085fc <HAL_GetTick>
 8009570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009574:	f7ff f842 	bl	80085fc <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e093      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009586:	4b29      	ldr	r3, [pc, #164]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f0      	bne.n	8009574 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	69da      	ldr	r2, [r3, #28]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a0:	019b      	lsls	r3, r3, #6
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a8:	085b      	lsrs	r3, r3, #1
 80095aa:	3b01      	subs	r3, #1
 80095ac:	041b      	lsls	r3, r3, #16
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	061b      	lsls	r3, r3, #24
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095bc:	071b      	lsls	r3, r3, #28
 80095be:	491b      	ldr	r1, [pc, #108]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009634 <HAL_RCC_OscConfig+0x4b4>)
 80095c6:	2201      	movs	r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ca:	f7ff f817 	bl	80085fc <HAL_GetTick>
 80095ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095d0:	e008      	b.n	80095e4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095d2:	f7ff f813 	bl	80085fc <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e064      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095e4:	4b11      	ldr	r3, [pc, #68]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0f0      	beq.n	80095d2 <HAL_RCC_OscConfig+0x452>
 80095f0:	e05c      	b.n	80096ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095f2:	4b10      	ldr	r3, [pc, #64]	@ (8009634 <HAL_RCC_OscConfig+0x4b4>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f8:	f7ff f800 	bl	80085fc <HAL_GetTick>
 80095fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095fe:	e008      	b.n	8009612 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009600:	f7fe fffc 	bl	80085fc <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d901      	bls.n	8009612 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e04d      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009612:	4b06      	ldr	r3, [pc, #24]	@ (800962c <HAL_RCC_OscConfig+0x4ac>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1f0      	bne.n	8009600 <HAL_RCC_OscConfig+0x480>
 800961e:	e045      	b.n	80096ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d107      	bne.n	8009638 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e040      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
 800962c:	40023800 	.word	0x40023800
 8009630:	40007000 	.word	0x40007000
 8009634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009638:	4b1f      	ldr	r3, [pc, #124]	@ (80096b8 <HAL_RCC_OscConfig+0x538>)
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d030      	beq.n	80096a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009650:	429a      	cmp	r2, r3
 8009652:	d129      	bne.n	80096a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800965e:	429a      	cmp	r2, r3
 8009660:	d122      	bne.n	80096a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009668:	4013      	ands	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800966e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009670:	4293      	cmp	r3, r2
 8009672:	d119      	bne.n	80096a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967e:	085b      	lsrs	r3, r3, #1
 8009680:	3b01      	subs	r3, #1
 8009682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009684:	429a      	cmp	r2, r3
 8009686:	d10f      	bne.n	80096a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009694:	429a      	cmp	r2, r3
 8009696:	d107      	bne.n	80096a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d001      	beq.n	80096ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	40023800 	.word	0x40023800

080096bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e042      	b.n	8009754 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fd7e 	bl	800a1e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2224      	movs	r2, #36	@ 0x24
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f973 	bl	80099ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	695a      	ldr	r2, [r3, #20]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68da      	ldr	r2, [r3, #12]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	@ 0x28
 8009760:	af02      	add	r7, sp, #8
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	4613      	mov	r3, r2
 800976a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b20      	cmp	r3, #32
 800977a:	d175      	bne.n	8009868 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_UART_Transmit+0x2c>
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e06e      	b.n	800986a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2221      	movs	r2, #33	@ 0x21
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800979a:	f7fe ff2f 	bl	80085fc <HAL_GetTick>
 800979e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	88fa      	ldrh	r2, [r7, #6]
 80097a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b4:	d108      	bne.n	80097c8 <HAL_UART_Transmit+0x6c>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	61bb      	str	r3, [r7, #24]
 80097c6:	e003      	b.n	80097d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097d0:	e02e      	b.n	8009830 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2200      	movs	r2, #0
 80097da:	2180      	movs	r1, #128	@ 0x80
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f848 	bl	8009872 <UART_WaitOnFlagUntilTimeout>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d005      	beq.n	80097f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2220      	movs	r2, #32
 80097ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e03a      	b.n	800986a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10b      	bne.n	8009812 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	3302      	adds	r3, #2
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	e007      	b.n	8009822 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	3301      	adds	r3, #1
 8009820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009826:	b29b      	uxth	r3, r3
 8009828:	3b01      	subs	r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1cb      	bne.n	80097d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2200      	movs	r2, #0
 8009842:	2140      	movs	r1, #64	@ 0x40
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f814 	bl	8009872 <UART_WaitOnFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e006      	b.n	800986a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2220      	movs	r2, #32
 8009860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	e000      	b.n	800986a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009868:	2302      	movs	r3, #2
  }
}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b086      	sub	sp, #24
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4613      	mov	r3, r2
 8009880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009882:	e03b      	b.n	80098fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988a:	d037      	beq.n	80098fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800988c:	f7fe feb6 	bl	80085fc <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	6a3a      	ldr	r2, [r7, #32]
 8009898:	429a      	cmp	r2, r3
 800989a:	d302      	bcc.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e03a      	b.n	800991c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d023      	beq.n	80098fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b80      	cmp	r3, #128	@ 0x80
 80098b8:	d020      	beq.n	80098fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b40      	cmp	r3, #64	@ 0x40
 80098be:	d01d      	beq.n	80098fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d116      	bne.n	80098fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f81d 	bl	8009924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2208      	movs	r2, #8
 80098ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e00f      	b.n	800991c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4013      	ands	r3, r2
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	bf0c      	ite	eq
 800990c:	2301      	moveq	r3, #1
 800990e:	2300      	movne	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	429a      	cmp	r2, r3
 8009918:	d0b4      	beq.n	8009884 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009924:	b480      	push	{r7}
 8009926:	b095      	sub	sp, #84	@ 0x54
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	330c      	adds	r3, #12
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800994c:	643a      	str	r2, [r7, #64]	@ 0x40
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800995a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e5      	bne.n	800992c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3314      	adds	r3, #20
 8009966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f023 0301 	bic.w	r3, r3, #1
 8009976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3314      	adds	r3, #20
 800997e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009982:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e5      	bne.n	8009960 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	2b01      	cmp	r3, #1
 800999a:	d119      	bne.n	80099d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f023 0310 	bic.w	r3, r3, #16
 80099b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099bc:	61ba      	str	r2, [r7, #24]
 80099be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e5      	bne.n	800999c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80099de:	bf00      	nop
 80099e0:	3754      	adds	r7, #84	@ 0x54
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099f0:	b0c0      	sub	sp, #256	@ 0x100
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a08:	68d9      	ldr	r1, [r3, #12]
 8009a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	ea40 0301 	orr.w	r3, r0, r1
 8009a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a44:	f021 010c 	bic.w	r1, r1, #12
 8009a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a52:	430b      	orrs	r3, r1
 8009a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a66:	6999      	ldr	r1, [r3, #24]
 8009a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	ea40 0301 	orr.w	r3, r0, r1
 8009a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8009cb8 <UART_SetConfig+0x2cc>)
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d005      	beq.n	8009a8c <UART_SetConfig+0xa0>
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	4b8d      	ldr	r3, [pc, #564]	@ (8009cbc <UART_SetConfig+0x2d0>)
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d104      	bne.n	8009a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a8c:	f7ff f9ba 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 8009a90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a94:	e003      	b.n	8009a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a96:	f7ff f9a1 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 8009a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa8:	f040 810c 	bne.w	8009cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	1891      	adds	r1, r2, r2
 8009ac4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009ac6:	415b      	adcs	r3, r3
 8009ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009ace:	4621      	mov	r1, r4
 8009ad0:	eb12 0801 	adds.w	r8, r2, r1
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	eb43 0901 	adc.w	r9, r3, r1
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aee:	4690      	mov	r8, r2
 8009af0:	4699      	mov	r9, r3
 8009af2:	4623      	mov	r3, r4
 8009af4:	eb18 0303 	adds.w	r3, r8, r3
 8009af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009afc:	462b      	mov	r3, r5
 8009afe:	eb49 0303 	adc.w	r3, r9, r3
 8009b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	18db      	adds	r3, r3, r3
 8009b1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b20:	4613      	mov	r3, r2
 8009b22:	eb42 0303 	adc.w	r3, r2, r3
 8009b26:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009b30:	f7fe fb68 	bl	8008204 <__aeabi_uldivmod>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4b61      	ldr	r3, [pc, #388]	@ (8009cc0 <UART_SetConfig+0x2d4>)
 8009b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	011c      	lsls	r4, r3, #4
 8009b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b54:	4642      	mov	r2, r8
 8009b56:	464b      	mov	r3, r9
 8009b58:	1891      	adds	r1, r2, r2
 8009b5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b5c:	415b      	adcs	r3, r3
 8009b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b64:	4641      	mov	r1, r8
 8009b66:	eb12 0a01 	adds.w	sl, r2, r1
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b84:	4692      	mov	sl, r2
 8009b86:	469b      	mov	fp, r3
 8009b88:	4643      	mov	r3, r8
 8009b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b92:	464b      	mov	r3, r9
 8009b94:	eb4b 0303 	adc.w	r3, fp, r3
 8009b98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	18db      	adds	r3, r3, r3
 8009bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	eb42 0303 	adc.w	r3, r2, r3
 8009bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009bc6:	f7fe fb1d 	bl	8008204 <__aeabi_uldivmod>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc0 <UART_SetConfig+0x2d4>)
 8009bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	2264      	movs	r2, #100	@ 0x64
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	1acb      	subs	r3, r1, r3
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009be6:	4b36      	ldr	r3, [pc, #216]	@ (8009cc0 <UART_SetConfig+0x2d4>)
 8009be8:	fba3 2302 	umull	r2, r3, r3, r2
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009bf4:	441c      	add	r4, r3
 8009bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	1891      	adds	r1, r2, r2
 8009c0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c10:	415b      	adcs	r3, r3
 8009c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009c18:	4641      	mov	r1, r8
 8009c1a:	1851      	adds	r1, r2, r1
 8009c1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c1e:	4649      	mov	r1, r9
 8009c20:	414b      	adcs	r3, r1
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c24:	f04f 0200 	mov.w	r2, #0
 8009c28:	f04f 0300 	mov.w	r3, #0
 8009c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009c30:	4659      	mov	r1, fp
 8009c32:	00cb      	lsls	r3, r1, #3
 8009c34:	4651      	mov	r1, sl
 8009c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c3a:	4651      	mov	r1, sl
 8009c3c:	00ca      	lsls	r2, r1, #3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4619      	mov	r1, r3
 8009c42:	4603      	mov	r3, r0
 8009c44:	4642      	mov	r2, r8
 8009c46:	189b      	adds	r3, r3, r2
 8009c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	460a      	mov	r2, r1
 8009c50:	eb42 0303 	adc.w	r3, r2, r3
 8009c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	18db      	adds	r3, r3, r3
 8009c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c72:	4613      	mov	r3, r2
 8009c74:	eb42 0303 	adc.w	r3, r2, r3
 8009c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c82:	f7fe fabf 	bl	8008204 <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc0 <UART_SetConfig+0x2d4>)
 8009c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c90:	095b      	lsrs	r3, r3, #5
 8009c92:	2164      	movs	r1, #100	@ 0x64
 8009c94:	fb01 f303 	mul.w	r3, r1, r3
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	3332      	adds	r3, #50	@ 0x32
 8009c9e:	4a08      	ldr	r2, [pc, #32]	@ (8009cc0 <UART_SetConfig+0x2d4>)
 8009ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca4:	095b      	lsrs	r3, r3, #5
 8009ca6:	f003 0207 	and.w	r2, r3, #7
 8009caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4422      	add	r2, r4
 8009cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009cb4:	e106      	b.n	8009ec4 <UART_SetConfig+0x4d8>
 8009cb6:	bf00      	nop
 8009cb8:	40011000 	.word	0x40011000
 8009cbc:	40011400 	.word	0x40011400
 8009cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009cce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	464b      	mov	r3, r9
 8009cda:	1891      	adds	r1, r2, r2
 8009cdc:	6239      	str	r1, [r7, #32]
 8009cde:	415b      	adcs	r3, r3
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	1854      	adds	r4, r2, r1
 8009cea:	4649      	mov	r1, r9
 8009cec:	eb43 0501 	adc.w	r5, r3, r1
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	00eb      	lsls	r3, r5, #3
 8009cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cfe:	00e2      	lsls	r2, r4, #3
 8009d00:	4614      	mov	r4, r2
 8009d02:	461d      	mov	r5, r3
 8009d04:	4643      	mov	r3, r8
 8009d06:	18e3      	adds	r3, r4, r3
 8009d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	eb45 0303 	adc.w	r3, r5, r3
 8009d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009d32:	4629      	mov	r1, r5
 8009d34:	008b      	lsls	r3, r1, #2
 8009d36:	4621      	mov	r1, r4
 8009d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	008a      	lsls	r2, r1, #2
 8009d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d44:	f7fe fa5e 	bl	8008204 <__aeabi_uldivmod>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4b60      	ldr	r3, [pc, #384]	@ (8009ed0 <UART_SetConfig+0x4e4>)
 8009d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	011c      	lsls	r4, r3, #4
 8009d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	1891      	adds	r1, r2, r2
 8009d6e:	61b9      	str	r1, [r7, #24]
 8009d70:	415b      	adcs	r3, r3
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d78:	4641      	mov	r1, r8
 8009d7a:	1851      	adds	r1, r2, r1
 8009d7c:	6139      	str	r1, [r7, #16]
 8009d7e:	4649      	mov	r1, r9
 8009d80:	414b      	adcs	r3, r1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d90:	4659      	mov	r1, fp
 8009d92:	00cb      	lsls	r3, r1, #3
 8009d94:	4651      	mov	r1, sl
 8009d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d9a:	4651      	mov	r1, sl
 8009d9c:	00ca      	lsls	r2, r1, #3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	4619      	mov	r1, r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	4642      	mov	r2, r8
 8009da6:	189b      	adds	r3, r3, r2
 8009da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dac:	464b      	mov	r3, r9
 8009dae:	460a      	mov	r2, r1
 8009db0:	eb42 0303 	adc.w	r3, r2, r3
 8009db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	008b      	lsls	r3, r1, #2
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dda:	4641      	mov	r1, r8
 8009ddc:	008a      	lsls	r2, r1, #2
 8009dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009de2:	f7fe fa0f 	bl	8008204 <__aeabi_uldivmod>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	4b38      	ldr	r3, [pc, #224]	@ (8009ed0 <UART_SetConfig+0x4e4>)
 8009dee:	fba3 2301 	umull	r2, r3, r3, r1
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	2264      	movs	r2, #100	@ 0x64
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	1acb      	subs	r3, r1, r3
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	3332      	adds	r3, #50	@ 0x32
 8009e00:	4a33      	ldr	r2, [pc, #204]	@ (8009ed0 <UART_SetConfig+0x4e4>)
 8009e02:	fba2 2303 	umull	r2, r3, r2, r3
 8009e06:	095b      	lsrs	r3, r3, #5
 8009e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e0c:	441c      	add	r4, r3
 8009e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e12:	2200      	movs	r2, #0
 8009e14:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e16:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	1891      	adds	r1, r2, r2
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	415b      	adcs	r3, r3
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	1851      	adds	r1, r2, r1
 8009e30:	6039      	str	r1, [r7, #0]
 8009e32:	4649      	mov	r1, r9
 8009e34:	414b      	adcs	r3, r1
 8009e36:	607b      	str	r3, [r7, #4]
 8009e38:	f04f 0200 	mov.w	r2, #0
 8009e3c:	f04f 0300 	mov.w	r3, #0
 8009e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e44:	4659      	mov	r1, fp
 8009e46:	00cb      	lsls	r3, r1, #3
 8009e48:	4651      	mov	r1, sl
 8009e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e4e:	4651      	mov	r1, sl
 8009e50:	00ca      	lsls	r2, r1, #3
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	4603      	mov	r3, r0
 8009e58:	4642      	mov	r2, r8
 8009e5a:	189b      	adds	r3, r3, r2
 8009e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e5e:	464b      	mov	r3, r9
 8009e60:	460a      	mov	r2, r1
 8009e62:	eb42 0303 	adc.w	r3, r2, r3
 8009e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e72:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e80:	4649      	mov	r1, r9
 8009e82:	008b      	lsls	r3, r1, #2
 8009e84:	4641      	mov	r1, r8
 8009e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	008a      	lsls	r2, r1, #2
 8009e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e92:	f7fe f9b7 	bl	8008204 <__aeabi_uldivmod>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed0 <UART_SetConfig+0x4e4>)
 8009e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	2164      	movs	r1, #100	@ 0x64
 8009ea4:	fb01 f303 	mul.w	r3, r1, r3
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	011b      	lsls	r3, r3, #4
 8009eac:	3332      	adds	r3, #50	@ 0x32
 8009eae:	4a08      	ldr	r2, [pc, #32]	@ (8009ed0 <UART_SetConfig+0x4e4>)
 8009eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb4:	095b      	lsrs	r3, r3, #5
 8009eb6:	f003 020f 	and.w	r2, r3, #15
 8009eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4422      	add	r2, r4
 8009ec2:	609a      	str	r2, [r3, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed0:	51eb851f 	.word	0x51eb851f

08009ed4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*Interrupt call back function -- Ext1*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13)
 8009ede:	88fb      	ldrh	r3, [r7, #6]
 8009ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ee4:	d103      	bne.n	8009eee <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8009ee6:	2120      	movs	r1, #32
 8009ee8:	4803      	ldr	r0, [pc, #12]	@ (8009ef8 <HAL_GPIO_EXTI_Callback+0x24>)
 8009eea:	f7fe fe52 	bl	8008b92 <HAL_GPIO_TogglePin>
	}
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40020000 	.word	0x40020000

08009efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f02:	f7fe fb15 	bl	8008530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f06:	f000 f831 	bl	8009f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f0a:	f000 f8e3 	bl	800a0d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8009f0e:	f000 f88d 	bl	800a02c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009f12:	f000 f8b5 	bl	800a080 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (applLoopExit)
 8009f16:	e017      	b.n	8009f48 <main+0x4c>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ++appTestVar;
 8009f18:	4b10      	ldr	r3, [pc, #64]	@ (8009f5c <main+0x60>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8009f5c <main+0x60>)
 8009f20:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2,(uint8_t*)userdata,sizeof(userdata),HAL_MAX_DELAY);
 8009f22:	f04f 33ff 	mov.w	r3, #4294967295
 8009f26:	221f      	movs	r2, #31
 8009f28:	490d      	ldr	r1, [pc, #52]	@ (8009f60 <main+0x64>)
 8009f2a:	480e      	ldr	r0, [pc, #56]	@ (8009f64 <main+0x68>)
 8009f2c:	f7ff fc16 	bl	800975c <HAL_UART_Transmit>
		uint32_t current_tick = HAL_GetTick();
 8009f30:	f7fe fb64 	bl	80085fc <HAL_GetTick>
 8009f34:	6078      	str	r0, [r7, #4]
		while(HAL_GetTick() <= current_tick +1000);
 8009f36:	bf00      	nop
 8009f38:	f7fe fb60 	bl	80085fc <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d9f7      	bls.n	8009f38 <main+0x3c>
  while (applLoopExit)
 8009f48:	4b07      	ldr	r3, [pc, #28]	@ (8009f68 <main+0x6c>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1e3      	bne.n	8009f18 <main+0x1c>
 8009f50:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	200000dc 	.word	0x200000dc
 8009f60:	20000008 	.word	0x20000008
 8009f64:	20000094 	.word	0x20000094
 8009f68:	20000005 	.word	0x20000005

08009f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b094      	sub	sp, #80	@ 0x50
 8009f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f72:	f107 031c 	add.w	r3, r7, #28
 8009f76:	2234      	movs	r2, #52	@ 0x34
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fa25 	bl	800a3ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	609a      	str	r2, [r3, #8]
 8009f8c:	60da      	str	r2, [r3, #12]
 8009f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f90:	2300      	movs	r3, #0
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	4b23      	ldr	r3, [pc, #140]	@ (800a024 <SystemClock_Config+0xb8>)
 8009f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f98:	4a22      	ldr	r2, [pc, #136]	@ (800a024 <SystemClock_Config+0xb8>)
 8009f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009fa0:	4b20      	ldr	r3, [pc, #128]	@ (800a024 <SystemClock_Config+0xb8>)
 8009fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009fac:	2300      	movs	r3, #0
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	@ (800a028 <SystemClock_Config+0xbc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8009fb8:	4a1b      	ldr	r2, [pc, #108]	@ (800a028 <SystemClock_Config+0xbc>)
 8009fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	4b19      	ldr	r3, [pc, #100]	@ (800a028 <SystemClock_Config+0xbc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009fd4:	2310      	movs	r3, #16
 8009fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009fdc:	f107 031c 	add.w	r3, r7, #28
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff f8cd 	bl	8009180 <HAL_RCC_OscConfig>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8009fec:	f000 f8cc 	bl	800a188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009ff0:	230f      	movs	r3, #15
 8009ff2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a000:	2300      	movs	r3, #0
 800a002:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	2100      	movs	r1, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fdf4 	bl	8008bf8 <HAL_RCC_ClockConfig>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <SystemClock_Config+0xae>
  {
    Error_Handler();
 800a016:	f000 f8b7 	bl	800a188 <Error_Handler>
  }
}
 800a01a:	bf00      	nop
 800a01c:	3750      	adds	r7, #80	@ 0x50
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	40023800 	.word	0x40023800
 800a028:	40007000 	.word	0x40007000

0800a02c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a030:	4b11      	ldr	r3, [pc, #68]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a032:	4a12      	ldr	r2, [pc, #72]	@ (800a07c <MX_USART1_UART_Init+0x50>)
 800a034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a036:	4b10      	ldr	r3, [pc, #64]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a03c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a03e:	4b0e      	ldr	r3, [pc, #56]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a040:	2200      	movs	r2, #0
 800a042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a044:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a046:	2200      	movs	r2, #0
 800a048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a04a:	4b0b      	ldr	r3, [pc, #44]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a050:	4b09      	ldr	r3, [pc, #36]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a052:	220c      	movs	r2, #12
 800a054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a056:	4b08      	ldr	r3, [pc, #32]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a058:	2200      	movs	r2, #0
 800a05a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a05c:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a05e:	2200      	movs	r2, #0
 800a060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a062:	4805      	ldr	r0, [pc, #20]	@ (800a078 <MX_USART1_UART_Init+0x4c>)
 800a064:	f7ff fb2a 	bl	80096bc <HAL_UART_Init>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a06e:	f000 f88b 	bl	800a188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000004c 	.word	0x2000004c
 800a07c:	40011000 	.word	0x40011000

0800a080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a084:	4b11      	ldr	r3, [pc, #68]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a086:	4a12      	ldr	r2, [pc, #72]	@ (800a0d0 <MX_USART2_UART_Init+0x50>)
 800a088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a08a:	4b10      	ldr	r3, [pc, #64]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a08c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a092:	4b0e      	ldr	r3, [pc, #56]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a094:	2200      	movs	r2, #0
 800a096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a098:	4b0c      	ldr	r3, [pc, #48]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a09e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a0a4:	4b09      	ldr	r3, [pc, #36]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a0a6:	220c      	movs	r2, #12
 800a0a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0aa:	4b08      	ldr	r3, [pc, #32]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a0b0:	4b06      	ldr	r3, [pc, #24]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a0b6:	4805      	ldr	r0, [pc, #20]	@ (800a0cc <MX_USART2_UART_Init+0x4c>)
 800a0b8:	f7ff fb00 	bl	80096bc <HAL_UART_Init>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a0c2:	f000 f861 	bl	800a188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a0c6:	bf00      	nop
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000094 	.word	0x20000094
 800a0d0:	40004400 	.word	0x40004400

0800a0d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0da:	f107 030c 	add.w	r3, r7, #12
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	605a      	str	r2, [r3, #4]
 800a0e4:	609a      	str	r2, [r3, #8]
 800a0e6:	60da      	str	r2, [r3, #12]
 800a0e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	4b23      	ldr	r3, [pc, #140]	@ (800a17c <MX_GPIO_Init+0xa8>)
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f2:	4a22      	ldr	r2, [pc, #136]	@ (800a17c <MX_GPIO_Init+0xa8>)
 800a0f4:	f043 0304 	orr.w	r3, r3, #4
 800a0f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0fa:	4b20      	ldr	r3, [pc, #128]	@ (800a17c <MX_GPIO_Init+0xa8>)
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	60bb      	str	r3, [r7, #8]
 800a104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a106:	2300      	movs	r3, #0
 800a108:	607b      	str	r3, [r7, #4]
 800a10a:	4b1c      	ldr	r3, [pc, #112]	@ (800a17c <MX_GPIO_Init+0xa8>)
 800a10c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10e:	4a1b      	ldr	r2, [pc, #108]	@ (800a17c <MX_GPIO_Init+0xa8>)
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	6313      	str	r3, [r2, #48]	@ 0x30
 800a116:	4b19      	ldr	r3, [pc, #100]	@ (800a17c <MX_GPIO_Init+0xa8>)
 800a118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	607b      	str	r3, [r7, #4]
 800a120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800a122:	2200      	movs	r2, #0
 800a124:	2120      	movs	r1, #32
 800a126:	4816      	ldr	r0, [pc, #88]	@ (800a180 <MX_GPIO_Init+0xac>)
 800a128:	f7fe fd1a 	bl	8008b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a12c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a132:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800a136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a138:	2301      	movs	r3, #1
 800a13a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a13c:	f107 030c 	add.w	r3, r7, #12
 800a140:	4619      	mov	r1, r3
 800a142:	4810      	ldr	r0, [pc, #64]	@ (800a184 <MX_GPIO_Init+0xb0>)
 800a144:	f7fe fb78 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a148:	2320      	movs	r3, #32
 800a14a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a14c:	2301      	movs	r3, #1
 800a14e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a154:	2300      	movs	r3, #0
 800a156:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4619      	mov	r1, r3
 800a15e:	4808      	ldr	r0, [pc, #32]	@ (800a180 <MX_GPIO_Init+0xac>)
 800a160:	f7fe fb6a 	bl	8008838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	2028      	movs	r0, #40	@ 0x28
 800a16a:	f7fe fb2e 	bl	80087ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a16e:	2028      	movs	r0, #40	@ 0x28
 800a170:	f7fe fb47 	bl	8008802 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800a174:	bf00      	nop
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40023800 	.word	0x40023800
 800a180:	40020000 	.word	0x40020000
 800a184:	40020800 	.word	0x40020800

0800a188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a18c:	b672      	cpsid	i
}
 800a18e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <Error_Handler+0x8>

0800a194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a19a:	2300      	movs	r3, #0
 800a19c:	607b      	str	r3, [r7, #4]
 800a19e:	4b10      	ldr	r3, [pc, #64]	@ (800a1e0 <HAL_MspInit+0x4c>)
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a2:	4a0f      	ldr	r2, [pc, #60]	@ (800a1e0 <HAL_MspInit+0x4c>)
 800a1a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1a8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e0 <HAL_MspInit+0x4c>)
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	603b      	str	r3, [r7, #0]
 800a1ba:	4b09      	ldr	r3, [pc, #36]	@ (800a1e0 <HAL_MspInit+0x4c>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1be:	4a08      	ldr	r2, [pc, #32]	@ (800a1e0 <HAL_MspInit+0x4c>)
 800a1c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1c4:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1c6:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <HAL_MspInit+0x4c>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1d2:	bf00      	nop
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	40023800 	.word	0x40023800

0800a1e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b08c      	sub	sp, #48	@ 0x30
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1ec:	f107 031c 	add.w	r3, r7, #28
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	609a      	str	r2, [r3, #8]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a32      	ldr	r2, [pc, #200]	@ (800a2cc <HAL_UART_MspInit+0xe8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d12d      	bne.n	800a262 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a206:	2300      	movs	r3, #0
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	4b31      	ldr	r3, [pc, #196]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20e:	4a30      	ldr	r2, [pc, #192]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a210:	f043 0310 	orr.w	r3, r3, #16
 800a214:	6453      	str	r3, [r2, #68]	@ 0x44
 800a216:	4b2e      	ldr	r3, [pc, #184]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a21a:	f003 0310 	and.w	r3, r3, #16
 800a21e:	61bb      	str	r3, [r7, #24]
 800a220:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a222:	2300      	movs	r3, #0
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	4b2a      	ldr	r3, [pc, #168]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22a:	4a29      	ldr	r2, [pc, #164]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	6313      	str	r3, [r2, #48]	@ 0x30
 800a232:	4b27      	ldr	r3, [pc, #156]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a23e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a244:	2302      	movs	r3, #2
 800a246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a24c:	2303      	movs	r3, #3
 800a24e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a250:	2307      	movs	r3, #7
 800a252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a254:	f107 031c 	add.w	r3, r7, #28
 800a258:	4619      	mov	r1, r3
 800a25a:	481e      	ldr	r0, [pc, #120]	@ (800a2d4 <HAL_UART_MspInit+0xf0>)
 800a25c:	f7fe faec 	bl	8008838 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800a260:	e030      	b.n	800a2c4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a1c      	ldr	r2, [pc, #112]	@ (800a2d8 <HAL_UART_MspInit+0xf4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d12b      	bne.n	800a2c4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a26c:	2300      	movs	r3, #0
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	4b17      	ldr	r3, [pc, #92]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a274:	4a16      	ldr	r2, [pc, #88]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a27a:	6413      	str	r3, [r2, #64]	@ 0x40
 800a27c:	4b14      	ldr	r3, [pc, #80]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a284:	613b      	str	r3, [r7, #16]
 800a286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	4b10      	ldr	r3, [pc, #64]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a290:	4a0f      	ldr	r2, [pc, #60]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	6313      	str	r3, [r2, #48]	@ 0x30
 800a298:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <HAL_UART_MspInit+0xec>)
 800a29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a2a4:	230c      	movs	r3, #12
 800a2a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a2b4:	2307      	movs	r3, #7
 800a2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b8:	f107 031c 	add.w	r3, r7, #28
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4805      	ldr	r0, [pc, #20]	@ (800a2d4 <HAL_UART_MspInit+0xf0>)
 800a2c0:	f7fe faba 	bl	8008838 <HAL_GPIO_Init>
}
 800a2c4:	bf00      	nop
 800a2c6:	3730      	adds	r7, #48	@ 0x30
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	40011000 	.word	0x40011000
 800a2d0:	40023800 	.word	0x40023800
 800a2d4:	40020000 	.word	0x40020000
 800a2d8:	40004400 	.word	0x40004400

0800a2dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <NMI_Handler+0x4>

0800a2e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <HardFault_Handler+0x4>

0800a2ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a2f0:	bf00      	nop
 800a2f2:	e7fd      	b.n	800a2f0 <MemManage_Handler+0x4>

0800a2f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a2f8:	bf00      	nop
 800a2fa:	e7fd      	b.n	800a2f8 <BusFault_Handler+0x4>

0800a2fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a300:	bf00      	nop
 800a302:	e7fd      	b.n	800a300 <UsageFault_Handler+0x4>

0800a304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a308:	bf00      	nop
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a312:	b480      	push	{r7}
 800a314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a316:	bf00      	nop
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a320:	b480      	push	{r7}
 800a322:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a324:	bf00      	nop
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a332:	f7fe f94f 	bl	80085d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}

0800a33a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a33e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a342:	f7fe fc41 	bl	8008bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a346:	bf00      	nop
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a350:	4b07      	ldr	r3, [pc, #28]	@ (800a370 <SystemInit+0x24>)
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a356:	4a06      	ldr	r2, [pc, #24]	@ (800a370 <SystemInit+0x24>)
 800a358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a35c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800a360:	4b03      	ldr	r3, [pc, #12]	@ (800a370 <SystemInit+0x24>)
 800a362:	4a04      	ldr	r2, [pc, #16]	@ (800a374 <SystemInit+0x28>)
 800a364:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a366:	bf00      	nop
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	e000ed00 	.word	0xe000ed00
 800a374:	08008000 	.word	0x08008000

0800a378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a3b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a37c:	f7ff ffe6 	bl	800a34c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a380:	480c      	ldr	r0, [pc, #48]	@ (800a3b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a382:	490d      	ldr	r1, [pc, #52]	@ (800a3b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a384:	4a0d      	ldr	r2, [pc, #52]	@ (800a3bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a388:	e002      	b.n	800a390 <LoopCopyDataInit>

0800a38a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a38a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a38c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a38e:	3304      	adds	r3, #4

0800a390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a394:	d3f9      	bcc.n	800a38a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a396:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a398:	4c0a      	ldr	r4, [pc, #40]	@ (800a3c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a39a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a39c:	e001      	b.n	800a3a2 <LoopFillZerobss>

0800a39e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a39e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3a0:	3204      	adds	r2, #4

0800a3a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3a4:	d3fb      	bcc.n	800a39e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800a3a6:	f000 f819 	bl	800a3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a3aa:	f7ff fda7 	bl	8009efc <main>
  bx  lr    
 800a3ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a3b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a3b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800a3bc:	0800a464 	.word	0x0800a464
  ldr r2, =_sbss
 800a3c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800a3c4:	200000e0 	.word	0x200000e0

0800a3c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a3c8:	e7fe      	b.n	800a3c8 <ADC_IRQHandler>

0800a3ca <memset>:
 800a3ca:	4402      	add	r2, r0
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d100      	bne.n	800a3d4 <memset+0xa>
 800a3d2:	4770      	bx	lr
 800a3d4:	f803 1b01 	strb.w	r1, [r3], #1
 800a3d8:	e7f9      	b.n	800a3ce <memset+0x4>
	...

0800a3dc <__libc_init_array>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	4d0d      	ldr	r5, [pc, #52]	@ (800a414 <__libc_init_array+0x38>)
 800a3e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a418 <__libc_init_array+0x3c>)
 800a3e2:	1b64      	subs	r4, r4, r5
 800a3e4:	10a4      	asrs	r4, r4, #2
 800a3e6:	2600      	movs	r6, #0
 800a3e8:	42a6      	cmp	r6, r4
 800a3ea:	d109      	bne.n	800a400 <__libc_init_array+0x24>
 800a3ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a41c <__libc_init_array+0x40>)
 800a3ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a420 <__libc_init_array+0x44>)
 800a3f0:	f000 f818 	bl	800a424 <_init>
 800a3f4:	1b64      	subs	r4, r4, r5
 800a3f6:	10a4      	asrs	r4, r4, #2
 800a3f8:	2600      	movs	r6, #0
 800a3fa:	42a6      	cmp	r6, r4
 800a3fc:	d105      	bne.n	800a40a <__libc_init_array+0x2e>
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	f855 3b04 	ldr.w	r3, [r5], #4
 800a404:	4798      	blx	r3
 800a406:	3601      	adds	r6, #1
 800a408:	e7ee      	b.n	800a3e8 <__libc_init_array+0xc>
 800a40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40e:	4798      	blx	r3
 800a410:	3601      	adds	r6, #1
 800a412:	e7f2      	b.n	800a3fa <__libc_init_array+0x1e>
 800a414:	0800a45c 	.word	0x0800a45c
 800a418:	0800a45c 	.word	0x0800a45c
 800a41c:	0800a45c 	.word	0x0800a45c
 800a420:	0800a460 	.word	0x0800a460

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
